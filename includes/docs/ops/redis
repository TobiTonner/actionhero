<h1 id="redis-configurations">Redis Configurations</h1>

<p>Redis is technically optional in ActionHero environments, but you will need it if you want to coordinates tasks across a cluster of
workers, handle group chat mechanics between WebSocket clients, or do other cross-cluster operations. In those cases, you'll want your
Redis setup to be reliable.</p>

<p>Running Redis in high-availability mode for Production environments is easy, and ioredis (the driver ActionHero uses) supports both
schemes, but it is important to understand the differences between the options available.</p>

<p><img alt="redis options" src="/images/redis.png" /></p>

<p>In Sentinel mode, you have your Redis configured in a normal master->slave configuration. However, rather than hard-code your
application to know who the master and slaves are, your application connects to the Sentinel processes instead. These Sentinels
transparently pipeline your connection to the proper Redis master, and they do this invisibly to ActionHero / your application.</p>

<p>The biggest advantage to this configuration is high-availability. In the event of a master failure, the Sentinel processes reach a
consensus, then elect a new master automatically. Since the same process which handles master election also manages the client connections,
no requests are lost - the sentinels hold the connection idle and then replay any pending requests on the new master after election. In the
configuration shown in the first diagram above, up to 2 Redis data nodes and any 1 Sentinel can fail without the entire system failing.</p>

<p>Note that it is not necessary to run the Sentinel nodes on separate servers. They can be run as parallel processes on the Redis nodes
themselves.</p>

<p>To run this configuration, configure ioredis with a list of the Sentinel nodes and the name of the cluster. The driver will automatically
connect to an appropriate Sentinel in round-robin fashion, reconnecting to another node if one is down, or fails.</p>

<p>In Cluster mode, Redis shards all the keys in data into &quot;slots&quot; which are evenly allocated though all the masters in the
cluster. The client can connect to any node in the cluster, and if the requested key belongs on another node, it will proxy the request
for you (just like the Sentinel would). The cluster can also take care of master re-election &quot;for each shard&quot; in the event of a
master node failure.</p>

<p>Cluster mode provides similar high-availability to Sentinel mode, but the sharding allows more data to be stored in the cluster overall.
However, where Sentinel mode requires a minimum of 3 servers, Cluster mode requires a minimum of 6 to reach a quorem and provide full
redundancy.

<p><strong>Important note:</strong> While you may opt to run &quot;sentinel processes&quot;, itâ€™s the same codebase as regular redis, just
running in &quot;sentinel mode&quot;. The same goes if you run redis in &quot;cluster mode&quot;.</p>
